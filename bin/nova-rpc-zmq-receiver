#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

#    Copyright 2011 OpenStack LLC
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import eventlet
eventlet.monkey_patch()

import gettext
import logging
import os
import socket
import string
import sys
import time

import zmq

from nova import flags
from nova import log as logging
from nova import utils

from nova.rpc import impl_zmq

# If ../nova/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
POSSIBLE_TOPDIR = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(POSSIBLE_TOPDIR, 'nova', '__init__.py')):
    sys.path.insert(0, POSSIBLE_TOPDIR)

if __name__ == '__main__':
    utils.default_flagfile()
    flags.FLAGS(sys.argv)
    logging.setup()
    utils.monkey_patch()

    ipc_dir = '/var/run/nova'
    in_addr = 'inproc://zmq_reply_queue'
    out_addr = "ipc://%s/zmq_reply_queue" % ipc_dir

    # Create the necessary directories/files for this service.
    if not os.path.isdir(ipc_dir):
        utils.execute('mkdir', '-p', ipc_dir, run_as_root=True)
        utils.execute('chown', "%s:%s" % (os.getuid(), os.getgid()),
                      ipc_dir, run_as_root=True)
        utils.execute('chmod', '750', ipc_dir, run_as_root=True)

    topic = "zmq_replies.%s" % socket.gethostname()
    proxy = impl_zmq.InternalContext(None)

    reactor = impl_zmq.ZmqReactor()
    reactor.register(proxy, in_addr, zmq.PULL, out_addr, zmq.PUB)
    reactor.consume()
    reactor.wait()
